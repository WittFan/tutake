"""
This file is auto generator by CodeGenerator. Don't modify it directly, instead alter tushare_api.tmpl of it.

Tushare {{name}}接口
{{path}}  https://tushare.pro/document/2?doc_id={{id}}

@author: rmfish
"""
import pandas as pd
import logging
from sqlalchemy import Integer, String, Float, Column, create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

from tutake.api.tushare.base_dao import BaseDao
from tutake.api.tushare.dao import DAO
from tutake.api.tushare.extends.{{name}}_ext import *
from tutake.api.tushare.process import ProcessType, DataProcess
from tutake.api.tushare.tushare_base import TuShareBase
from tutake.utils.config import tutake_config
from tutake.utils.decorator import sleep


engine = create_engine("%s/%s" % (tutake_config.get_data_sqlite_driver_url(), '{{database}}.db'))
session_factory = sessionmaker()
session_factory.configure(bind=engine)
Base = declarative_base()
logger = logging.getLogger('api.tushare.{{name}}')


class {{entity_name}}(Base):
    __tablename__ = "{{table_name}}"
    {% if not exist_primary_key %}id = Column(Integer, primary_key=True , autoincrement=True)
    {% endif %}{% for output in outputs %}{{output.name}} = Column({{output.data_type|get_sql_type}}{% if output.primary_key %}, primary_key=True{% endif %}{% if output.index %}, index=True{% endif %}, comment='{{output.desc}}')
    {% endfor %}

{{entity_name}}.__table__.create(bind=engine, checkfirst=True)


class {{title_name}}(BaseDao, TuShareBase, DataProcess):
    instance = None

    def __new__(cls, *args, **kwargs):
        if cls.instance is None:
            cls.instance = super().__new__(cls)
        return cls.instance

    def __init__(self):
        query_fields = [n for n in [{% for input in inputs %}'{{input.name}}', {% endfor %}] if n not in ['limit', 'offset']]
        entity_fields = [{% for output in outputs %}"{{output.name}}"{% if not loop.last %}, {% endif %}{% endfor %}]
        BaseDao.__init__(self, engine, session_factory, {{entity_name}}, '{{table_name}}', query_fields, entity_fields)
        TuShareBase.__init__(self)
        DataProcess.__init__(self,"{{name}}")
        self.dao = DAO()

    def {{name}}(self, fields='', **kwargs):
        """
        {{desc}}
        | Arguments:
        {% for input in inputs %}| {{input.name}}({{input.data_type}}): {% if input.must=='Y' %}required{% endif %}  {{input.desc}}
        {% endfor %}
        :return: DataFrame
        {% for output in outputs %} {{output.name}}({{output.data_type}})  {{output.desc}}
        {% endfor %}
        """
        return super().query(fields, **kwargs)

    def process(self, process_type: ProcessType):
        """
        同步历史数据
        :return:
        """
        return super()._process(process_type, self.fetch_and_append)

    def fetch_and_append(self, **kwargs):
        """
        获取tushare数据并append到数据库中
        :return: 数量行数
        """
        init_args = { {% for input in inputs %}"{{input.name}}": ""{% if not loop.last %},{% endif %}{% endfor %} }
        if len(kwargs.keys()) == 0:
            kwargs = init_args
        # 初始化offset和limit
        if not kwargs.get("limit"):
            kwargs['limit'] = self.default_limit()
        init_offset = 0
        offset = 0
        if kwargs.get('offset'):
            offset = int(kwargs['offset'])
            init_offset = offset

        kwargs = {
            key: kwargs[key] for key in kwargs.keys() & init_args.keys()
        }

        @sleep(timeout=61, time_append=60, retry=20, match="^抱歉，您每分钟最多访问该接口")
        def fetch_save(offset_val=0):
            kwargs['offset'] = str(offset_val)
            logger.debug("Invoke pro.{{name}} with args: {}".format(kwargs))
            res = self.tushare_api().{{name}}(**kwargs, fields=self.entity_fields)
            res.to_sql('{{table_name}}', con=engine, if_exists='append', index=False, index_label=['ts_code'])
            return res

        df = fetch_save(offset)
        offset += df.shape[0]
        while kwargs['limit'] != "" and str(df.shape[0]) == kwargs['limit']:
            df = fetch_save(offset)
            offset += df.shape[0]
        return offset - init_offset

setattr({{title_name}}, 'default_limit', default_limit_ext)
setattr({{title_name}}, 'default_order_by', default_order_by_ext)
setattr({{title_name}}, 'prepare', prepare_ext)
setattr({{title_name}}, 'tushare_parameters', tushare_parameters_ext)
setattr({{title_name}}, 'param_loop_process', param_loop_process_ext)


if __name__ == '__main__':
    pd.set_option('display.max_columns', 500)  # 显示列数
    pd.set_option('display.width', 1000)
    logger.setLevel(logging.INFO)
    api = {{title_name}}()
    api.process(ProcessType.HISTORY)  # 同步历史数据
    # api.process(ProcessType.INCREASE)  # 同步增量数据
    print(api.{{name}}())  # 数据查询接口

